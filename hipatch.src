;  hipatch - 6502 high speed SIO code OS patch program
;
;  Copyright (c) by ABBUC e.V. (www.abbuc.de) and Matthias Reichl
;
;  This program is free software; you can redistribute it and/or modify
;  it under the terms of the GNU General Public License as published by
;  the Free Software Foundation; either version 2 of the License, or
;  (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program; if not, write to the Free Software
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
	.include "hipatch.inc"
	.include "cio.inc"

.bank

ORG	= $6000

XLSIO	= $E971

TMPVEC	= $E0	; temporary ZP vector

	* = ORG

	BPUT 0, TTITL, TTIT

; check if OS is already patched
	LDX #3
CHKP	LDA XLSIO,X
	CMP MYCODE,X
	BNE CHKP1
	DEX
	BPL CHKP

	PRINT 0, TISP
	JSR CLRSIO

	INC WARNING

; delay for approx. 2 seconds if some warning occurred
EXIT	LDA WARNING
	BEQ NODELAY
	CLC
	LDA 20
	ADC #100
W20	CMP 20
	BNE W20
NODELAY	RTS

; just clear SIO settings
CLRSIO	LDX #12
	LDA #0
CLRSIOL	STA RAMBUF,X
	DEX
	BPL CLRSIOL
	RTS

; check if OS is compatible

CHKP1	LDX #3
CHKCO	LDA XLSIO,X
	CMP XLCODE,X
	BNE CHKCO1
	DEX
	BPL CHKCO
	BMI CHKCO2

CHKCO1	PRINT 0, TINC
	INC WARNING
	JMP EXIT

CHKCO2

.IF .DEF ROMABLE
; check if we need to update the ROM checksums
	JSR CHKCSUM
.ENDIF

	PRINT 0, TPAT

; check if we need to move ROM to RAM
	LDA $D301
	AND #$01
	STA NEEDRES
	BEQ NOCOPY
	JSR ROMRAM

; write highspeed SIO code to PDEST

NOCOPY	LDX #0
COPLP	LDA PCODE,X
	STA PDEST,X
	LDA PCODE+$100,X
	STA PDEST+$100,X
	LDA PCODE+$200,X
	STA PDEST+$200,X
	LDA PCODE+$300,X
	STA PDEST+$300,X
	INX
	BNE COPLP

; clear speed tab
	JSR CLRSIO

; patch OS SIO routine

	LDX #3
COP2	LDA XLSIO,X
	STA PSTD,X
	LDA MYCODE,X
	STA XLSIO,X
	DEX
	BPL COP2

	LDA #$4C
	STA PSTD+4
	LDA #<(XLSIO+4)
	STA PSTD+5
	LDA #>(XLSIO+4)
	STA PSTD+6

.if .def PATCHKEY
; check if we can patch the keyboard IRQ handler

	LDX #2
CHKKY	LDA KEYIRQ,X
	CMP XLKEY,X
	BNE CHKKY1
	DEX
	BPL CHKKY
	BMI CHKKY2

CHKKY1	PRINT 0, TNOKEY
	INC WARNING
	JMP CHKKY4

CHKKY2	LDX #2
CHKKY3	LDA MYKEY,X
	STA KEYIRQ,X
	DEX
	BPL CHKKY3

	PRINT 0, TKEY

CHKKY4

.endif

.if .def PATCHNMI
; check if we can patch the NMI handler
	LDA $FFFA
	CMP #$18
	BNE CHKNMI1
	LDA $FFFB
	CMP #$C0
	BEQ CHKNMI2

CHKNMI1	PRINT 0, TNONMI
	INC WARNING
	JMP CHKNMI3

CHKNMI2	LDA #0
	STA $D40E
	LDA #<PNMI
	STA $FFFA
	LDA #>PNMI
	STA $FFFB
	LDA #$40
	STA $D40E

	PRINT 0, TNMI

CHKNMI3

.endif

.IF .DEF ROMABLE
; update ROM checksums
	JSR UPDCSUM
.ENDIF

	LDA NEEDRES
	BEQ NORES

; install reset handler

	LDX #RESETL-1
COPRES	LDA RESET,X
	STA RESETAD,X
	DEX
	BPL COPRES

	LDA #<RESETAD
	STA 2
	LDA #>RESETAD
	STA 3
	LDA 9
	ORA #2
	STA 9

NORES	JMP EXIT

NEEDRES	.BYTE 0
WARNING	.BYTE 0

	.include "romram.src"

RESET	LDA $D301
	AND #$FE
	STA $D301
	RTS
RESETL	= * - RESET

XLCODE	TSX
	STX $0318

MYCODE	NOP
	JMP PSIO

.if .def PATCHKEY
; original contents of keyboard IRQ handler
XLKEY	LDA $D209

; patched contents of keyboard IRQ handler
MYKEY	JSR PKEY
.endif

.if .def ROMABLE

ROM1ID	= $C000
ROM2ID	= $FFF8

CADR	= $E0
CEND	= $E2
CSUM	= $E4

; calculate checksum of a ROM-block

CSBLK	LDY #0
CSSET	LDA ADRTAB,X
	STA CADR,Y
	INX
	INY
	CPY #4
	BNE CSSET
	LDY #0
CSBLKL	CLC
	LDA (CADR),Y
	ADC CSUM
	STA CSUM
	BCC CSBLKL1
	INC CSUM+1
CSBLKL1	INC CADR
	BNE CSBLKL2
	INC CADR+1
CSBLKL2	LDA CADR
	CMP CEND
	BNE CSBLKL
	LDA CADR+1
	CMP CEND+1
	BNE CSBLKL
	RTS

; checksum of first 8k ROM

CHK1	LDA #0
	STA CSUM
	STA CSUM+1
	TAX
	JSR CSBLK

	LDA $D301
	PHA
	AND #$7F
	ORA #1
	STA $D301
	JSR CSBLK

	PLA
	STA $D301
	JSR CSBLK

	RTS

; checksum of second 8k ROM

CHK2	LDA #0
	STA CSUM
	STA CSUM+1
	LDX #12
	JSR CSBLK
	JSR CSBLK
	RTS

ADRTAB	.WORD $C002,$D000
	.WORD $5000,$5800
	.WORD $D800,$E000

	.WORD $E000,$FFF8
	.WORD $FFFA,$0000

DOCSUPD	.BYTE 0

CHKCSUM	LDA #0
	STA DOCSUPD
	JSR CHK1
	LDA ROM1ID
	CMP CSUM
	BNE CSERR
	LDA ROM1ID+1
	CMP CSUM+1
	BNE CSERR

	JSR CHK2
	LDA ROM2ID
	CMP CSUM
	BNE CSERR
	LDA ROM2ID+1
	CMP CSUM+1
	BNE CSERR

	INC DOCSUPD
	RTS

CSERR	BPUT 0, TCSERRL, TCSERR
	RTS

UPDCSUM	LDA DOCSUPD
	BEQ UPDCSE

	PRINT 0, TUPDCS

	JSR CHK1
	LDA CSUM
	STA ROM1ID
	LDA CSUM+1
	STA ROM1ID+1

	JSR CHK2
	LDA CSUM
	STA ROM2ID
	LDA CSUM+1
	STA ROM2ID+1

UPDCSE	RTS

TCSERR	.BYTE "ROM checksum error - skipping",155
	.BYTE "checksum update", 155,155
TCSERRL	= * - TCSERR

TUPDCS	.BYTE "updating ROM checksum",155

.endif

.if .def PATCHKEY
TNOKEY	.BYTE "unknown ROM, not patching keyboard",155
TKEY	.BYTE "patched keyboard IRQ handler",155
.endif

.if .def PATCHNMI
TNONMI	.BYTE "unknown ROM, not patching NMI",155
TNMI	.BYTE "patched NMI handler",155
.endif

.if .def ROMABLE
TTIT	.BYTE 155,"Highspeed SIO patch V1.14R",155
.else
TTIT	.BYTE 155,"Highspeed SIO patch V1.14",155
.endif
	.BYTE "(c) 2009 by Matthias Reichl",155,155
TTITL	= * - TTIT

TISP	.BYTE "OS already patched",155
TINC	.BYTE "incompatible OS",155
TPAT	.BYTE "patching OS",155

PCODE	= *

.if .def ROMABLE
  .if .def PATCHKEY
	.incbin "hipatch-code-rom-key.bin"
  .else
	.incbin "hipatch-code-rom-nokey.bin"
  .endif
.else
  .if .def PATCHKEY
	.incbin "hipatch-code-key.bin"
  .else
	.incbin "hipatch-code-nokey.bin"
  .endif
.endif

.bank

	* = $2E0
	.WORD ORG

