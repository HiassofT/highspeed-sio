;  highsiocode.src - highspeed SIO routine
;
;  Copyright (c) by ABBUC e.V. (www.abbuc.de) and Matthias Reichl
;
;  This program is free software; you can redistribute it and/or modify
;  it under the terms of the GNU General Public License as published by
;  the Free Software Foundation; either version 2 of the License, or
;  (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program; if not, write to the Free Software
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;

DOHISIO	

;.if .def DIAGSIO
;	LDA #$01
;.else
	LDA #$02
;.endif

; internal entry point for highspeed SIO detection:
; load A with 1, only 1 retry and no speed fallback

DOHIDET	STA DRETRY

	SEI
	LDA #$01
	STA CRITIC
	LDA DUNIT
	ORA #$30
	STA CDEVIC
	LDA DCOMND
	STA CCOMND
	LDA DAUX1
	STA CAUX1
	LDA DAUX2
	STA CAUX2

.if .def DIAGSIO
	LDA #0
	STA ?DIAGER
.endif
	LDA SIOSPEED
	BPL ?NOTUR

	LDA CAUX2
	ORA #$80
	STA CAUX2
	BNE ?DOSIO1

?NOTUR	CMP #HAPFLG
	BEQ ?HAPPY
	CMP #XFFLG
	BNE ?DOSIO1

?XFCMD	LDA CCOMND
	ORA #$80
	STA CCOMND
	CMP #$A1
	BEQ ?DOSLOW
	CMP #$A2
	BNE ?DOSIO1
?DOSLOW	LDA #STDSPD
	STA SIOSPEED
	BNE ?DOSIO1

?HAPPY	LDA CCOMND
	CMP #$50
	BEQ ?HAPPY1
	CMP #$52
	BEQ ?HAPPY1
	CMP #$57
	BNE ?DOSLOW
?HAPPY1	ORA #$20
	STA CCOMND

?DOSIO1	TSX 
	STX STACKP

?DRETLP	LDA #$0D
	STA CRETRY
?CRETLP	

.if .def DIAGSIO
	LDA #0
	STA ?DIAGST
	STA ?DIAGBT
.endif

	LDA SIOSPEED
	CMP #$40
	BCC ?DOSIO2
	LDA #STDSPD
?DOSIO2	STA AUDF3
	LDA #$34	; set command line
	STA PBCTL
	LDA #$00
	STA STATUS
	STA BFENHI
	STA AUDF4
	LDA #$3A	; < CDEVIC
	STA BUFRLO
	LDA #$02	; > CDEVIC
	STA BUFRHI
	ASL 
	STA BFENLO

; setup pokey
	LDA #$28
	STA AUDCTL
	LDX #$A0
	LDA SOUNDR
	BEQ ?NOSND
	LDX #$A8
?NOSND	STX AUDC4

; transmit command frame
	JSR ?SENDBLK

	BIT SIOSPEED
	BPL ?NOTUR1
	LDA #TURSPD
	STA AUDF3

?NOTUR1	
	JSR ?CHKST ; read command frame ACK/NAK

.if .def DIAGSIO
	INC ?DIAGST
.endif

	BIT SIOSPEED
	BVC ?NOXF
	LDA #XFSPD
	STA AUDF3
?NOXF	LDA #1
	STA CRETRY	; no more command-frame retries
	LDA DBUFLO
	STA BUFRLO
	LDA DBUFHI
	STA BUFRHI
	LDA DBYTLO
	STA BFENLO
	LDA DBYTHI
	STA BFENHI
	LDA DSTATS
	BPL ?NOSEND

	JSR ?SENDBLK	; transmit data frame
	JSR ?CHKST	; receive data frame ACK/NAK

?NOSEND	JSR ?SETTIM1	; set command timeout and wait for command complete
	BIT DSTATS
	BVC ?SIOEND

	JSR ?GETBLK	; receive data block

?SIOEND	JSR ?CLEANUP	; reset timers and pokey
	LDY STATUS	; was the command successful?
	BEQ ?ENDCMD	; yes, we are done

	DEC CRETRY	; retry sending command frame?
	BEQ ?CHKDR	; no, already tried 13 times
	JMP ?CRETLP	; yes, we have some more retries
?CHKDR	

	DEC DRETRY	; any more command retries?
	BEQ ?ENDCMD	; no, we are finished
	JMP ?DRETLP	; yes, try it again
?ENDCMD	

	LDA #0
	STA CRITIC
	LDA POKMSK
	STA IRQEN

	LDY STATUS
	BNE ?ERRCMD

	INY
?ERRCMD	STY DSTATS
	CLI 
	RTS 

?SENDBLK	LDY #$00	; short delay before sending data
?WT1	INY 
	BNE ?WT1
	LDA #SKSEND	; set pokey to transmit data mode
	STA SKCTL
	STA SKREST
	LDA #MSKSEND
	STA IRQEN
	LDA (BUFRLO),Y	; start transmission by sending first byte
	STA CHKSUM
	STA SEROUT
	INY
	BNE ?SND2	; always
	
?SND1	LDA (BUFRLO),Y
	JSR ?SENDBYT	; normal send, wait for pokey clear
	INY 
	BNE ?SND2
	INC BUFRHI
	DEC BFENHI
; wait a litte after sending a full page, needed by some
; slow drives (?) when sending more than 256 bytes (??)
	LDX #$E0
?WT2	INX 
	BNE ?WT2
?SND2	CPY BFENLO
	BNE ?SND1
	LDA BFENHI
	BNE ?SND1
	LDA CHKSUM
	JSR ?SENDBYT
?WTSND	LDA IRQST
	AND #IMSCPL	; wait until transmit complete
	BNE ?WTSND
	RTS

?CHKST	
	LDY #$03
	JSR ?STIMOUT
	LDA #MSKRECV
	STA IRQEN
	BNE ?RDACK

?GETBLK	LDY #$00
	STY CHKSUM

; note: pokey is already set to receive mode (in rdquit),
; so we don't need to do the setup again

?GETLP	JSR ?GETBYTE
	STA (BUFRLO),Y
	JSR ?ADDSUM
	INY 
	BNE ?GET1
	INC BUFRHI
	DEC BFENHI
?GET1	CPY BFENLO
	BNE ?GETLP
	LDA BFENHI
	BNE ?GETLP
	JSR ?GETBYTE

.if .def DIAGSIO
	STA ?DIAGBT
.endif
	CMP CHKSUM
	BNE ?ERRCHK
	RTS 

; set command timeout

?SETTIM1	LDA DTIMLO
	ROR 
	ROR 
	TAY 
	AND #$3F
	TAX 
	TYA 
	ROR 
	AND #$C0
	TAY 
	JSR ?STIMOU2

; receive ACK/NAK (or COMPLETE/ERROR)

?RDACK	LDA #SKRECV	; set pokey to receive async mode
	STA SKCTL
	STA SKREST
	LDA #$3C	; clear command line
	STA PBCTL
	JSR ?GETBYTE

.if .def DIAGSIO
	STA ?DIAGBT
.endif

	CMP #'A		; ACK
	BNE ?NOACK
?RDOK	RTS
?NOACK	CMP #'C		; COMPLETE
	BEQ ?RDOK
	CMP #'E		; ERROR
	BNE ?NERRDEV
	LDY #ERRDEV	; command error
	.BYTE $2C	; BIT xxx (skip next 2 bytes)

?NERRDEV LDY #ERRNAK	; any other error -> set code $8B
	.BYTE $2C	; BIT xxx (skip next 2 bytes)

?ERRFRM	LDY #ERRFRM	; framing error
	.BYTE $2C	; BIT xxx (skip next 2 bytes)

?ERROVR	LDY #ERROVR	; data input overrun
	.BYTE $2C	; BIT xxx (skip next 2 bytes)

?ERRCHK	LDY #ERRCHK	; checksum error
	.BYTE $2C	; BIT xxx (skip next 2 bytes)

; general error routine, code in Y

?ERRTO	LDY #ERRTO

?ERR	STY STATUS

.if .def DIAGSIO
	LDX ?DIAGER
	TYA
	STA ?DIAGE,X
	LDA ?DIAGST
	STA ?DIAGS,X
	LDA ?DIAGBT
	STA ?DIAGB,X
	INC ?DIAGER
.endif

	LDX STACKP
	TXS
	JMP ?SIOEND	; we got an error, cleanup and try to restart

; timeout interrupt handler

MYERR138=?ERRTO

?ERRBRK	LDA #RMBRK	; reset break interrupt flag
	STA IRQEN
	LDA POKMSK	; set default pokey interrupt mask
	STA IRQEN
	LDX STACKP
	TXS
	JSR ?CLEANUP
	LDY #ERRBRK	; set error code $80
	STY STATUS
	JMP ?ENDCMD	; end command without retrying

?GETBYTE LDA #IMRECV
?GETBY1	BIT IRQST
	BPL ?ERRBRK	; break key pressed
	BNE ?GETBY1
	LDA #RMRECV	; reset data-receive IRQ bit
	STA IRQEN
	LDA #MSKRECV	; enable data-receive IRQ
	STA IRQEN
	LDA SKSTAT
	STA SKREST
	BPL ?ERRFRM	; framing error
	AND #$20
	BEQ ?ERROVR	; data input overrun
	LDA SERIN
	RTS 

?SENDBYT	TAX 
?WPUT	LDA IRQST
	BPL ?ERRBRK
	AND #IMSEND
	BNE ?WPUT
	LDA #RMSEND
	STA IRQEN
	LDA #MSKSEND
	STA IRQEN
	TXA 
	STA SEROUT

?ADDSUM	CLC 
	ADC CHKSUM
	ADC #$00
	STA CHKSUM
	RTS 

?CLRTIM1	LDY #$00
?STIMOUT	LDX #$00
?STIMOU2	LDA #1
	JSR SETVBV
	LDA #<?ERRTO
	STA CDTMA1
	LDA #>?ERRTO
	STA CDTMA1+1
	RTS

; cleanup, in case of error or end of transmission

?CLEANUP JSR ?CLRTIM1
	LDA #$A0
	STA AUDC4
	JSR ?CLRTIM1
	RTS


.if .def DIAGSIO
?DIAGS	.DC $20 0
?DIAGB	.DC $20 0
?DIAGE	.DC $20 0
?DIAGBT	.BYTE 0
?DIAGST	.BYTE 0
?DIAGER	.BYTE 0

PDIAG	LDA ?DIAGER
	BEQ ?PDIAG0

	LDA #0
	STA ?DIAGBT
?PDIAG1	LDX ?DIAGBT
	CPX #$0C
	BEQ ?PDIAG2
	LDA $0300,X
	JSR ?PHEX
	LDA #$20
	JSR ?PUTCHR
	INC ?DIAGBT
	BNE ?PDIAG1
?PDIAG2	LDA #155
	JSR ?PUTCHR

	LDA #0
	STA ?DIAGBT
?PDIAG3	LDX ?DIAGBT
	CPX ?DIAGER
	BEQ ?PDIAG0
	LDA ?DIAGS,X
	JSR ?PHEX
	LDA #$20
	JSR ?PUTCHR
	LDX ?DIAGBT
	LDA ?DIAGE,X
	JSR ?PHEX
	LDA #$20
	JSR ?PUTCHR
	LDX ?DIAGBT
	LDA ?DIAGB,X
	JSR ?PHEX
	LDA #155
	JSR ?PUTCHR
	INC ?DIAGBT
	BNE ?PDIAG3

?PDIAG0	RTS

?PHEX	PHA
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA ?HEXTAB,X
	JSR ?PUTCHR
	PLA
	AND #$0F
	TAX
	LDA ?HEXTAB,X

?PUTCHR	TAY
	LDA $E407
	PHA
	LDA $E406
	PHA
	TYA
	RTS

?HEXTAB	.BYTE "0123456789ABCDEF"

.endif

